# üìà STOCK ANALYSIS MODULE
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

from valuetracker.data import get_stock_data
from valuetracker.sp500_loader import load_sp500
from valuetracker.technicals import evaluate_technicals
from valuetracker.valuation_models import evaluate_academic_models
from valuetracker.forecast import (
    forecast_arima,
    forecast_prophet,
    forecast_holt_winters,
    monte_carlo_simulation,
    plot_forecast,
    plot_monte_carlo,
    evaluate_forecast
)
from valuetracker.econometrics import evaluate_econometrics
from valuetracker.risk_models import evaluate_risk
from valuetracker.intrinsic_value import evaluate_intrinsic_value

# ‚úÖ grading funkce (z≈Øst√°v√° stejn√°)
def grade_from_score(score: float) -> str:
    if score >= 90:
        return "A"
    elif score >= 80:
        return "B"
    elif score >= 70:
        return "C"
    elif score >= 60:
        return "D"
    elif score >= 50:
        return "E"
    else:
        return "F"

def stock_analysis_page():
    st.header("üìà Anal√Ωza vybran√© akcie")

    # ‚úÖ naƒçteme seznam spoleƒçnost√≠ z S&P 500
    sp500_df = load_sp500()
    all_options = [f"{row['Name']} ({row['Symbol']})" for _, row in sp500_df.iterrows()]

    # üéõ UI komponenty
    selection = st.selectbox("Vyber akcii:", all_options)
    period = st.selectbox("Obdob√≠ grafu:", ['6mo', '1y', '3y', 'ytd', 'max'], index=1)
    forecast_days = st.selectbox("Forecast:", [0, 30, 90, 180], index=0)

    if st.button("üîç Spustit anal√Ωzu"):
        name = selection.split(" (")[0]
        symbol = selection.split("(")[-1].replace(")", "")

        st.info(f"üì• Stahuji data pro **{name} ({symbol})**‚Ä¶")
        data = get_stock_data(symbol, period="max")

        # ‚úÖ rozbal√≠me data
        info = data['info']
        history = data['history']
        financials = data['financials']
        balance_sheet = data['balance_sheet']
        cashflow_statement = data['cashflow_statement']

        st.success("‚úÖ Data naƒçtena!")

        # üè∑ z√°kladn√≠ info
        st.subheader("üìä Z√°kladn√≠ informace")
        st.markdown(f"**N√°zev:** {info.get('shortName', 'N/A')}")
        st.markdown(f"**Sektor:** {info.get('sector', 'N/A')}")
        st.markdown(f"**Zamƒõstnanci:** {info.get('fullTimeEmployees', 'N/A')}")

        # üìà graf closing price
        st.subheader("üìà V√Ωvoj ceny akcie")
        history.index = history.index.tz_localize(None)
        if period == '6mo':
            plot_data = history.loc[history.index >= pd.Timestamp.today() - pd.DateOffset(months=6)]
        elif period == '1y':
            plot_data = history.loc[history.index >= pd.Timestamp.today() - pd.DateOffset(years=1)]
        elif period == '3y':
            plot_data = history.loc[history.index >= pd.Timestamp.today() - pd.DateOffset(years=3)]
        elif period == 'ytd':
            current_year = pd.Timestamp.today().year
            plot_data = history[history.index >= f'{current_year}-01-01']
        else:
            plot_data = history

        fig, ax = plt.subplots(figsize=(10, 5))
        ax.plot(plot_data.index, plot_data['Close'], label='Close Price', color='blue')
        ax.set_title(f"üìà V√Ωvoj ceny {name} ({symbol})")
        ax.set_xlabel("Datum")
        ax.set_ylabel("Cena (USD)")
        ax.legend()
        ax.grid(True)
        st.pyplot(fig)

        # ‚úÖ posledn√≠ch 5 closing prices
        st.subheader("üìä Posledn√≠ch 5 closing prices")
        st.dataframe(history['Close'].tail(5).iloc[::-1])

        # ‚úÖ Technick√° anal√Ωza
        st.subheader("üìä Technick√° anal√Ωza")
        ta = evaluate_technicals(history)
        for k, v in ta['signals'].items():
            st.write(f"{k}: {v}")
        st.write(f"‚û°Ô∏è TA hodnocen√≠: **{ta['overall']}**")

        # üìö Akademick√© modely
        st.subheader("üìö Akademick√© modely")
        academic = evaluate_academic_models(history)
        for model_name in ["Sharpe Ratio", "Beta", "Treynor Ratio", "Jensen's Alpha", "Black‚ÄìScholes (demo call)"]:
            val = academic[model_name]
            comment = academic["Koment√°≈ôe"].get(model_name, "")
            st.write(f"{model_name}: {val} ‚Äì {comment}")
        st.write(f"üéØ Z√°vƒõr: **{academic['Hodnocen√≠']}**")

        # üìä EKONOMETRIE
        st.subheader("üìä Ekonometrick√° anal√Ωza")
        econ = evaluate_econometrics(history)
        for section, results in econ.items():
            if isinstance(results, dict):
                st.markdown(f"**{section}**")
                for k, v in results.items():
                    st.write(f"{k}: {v}")
        st.write(f"üì¢ Hodnocen√≠: **{econ['Hodnocen√≠']}**")

        # ‚ö†Ô∏è Rizikov√° anal√Ωza
        st.subheader("‚ö†Ô∏è Rizikov√° anal√Ωza")
        risk = evaluate_risk(history)
        for k, v in risk.items():
            if k not in ["Koment√°≈ôe", "Sk√≥re rizika"]:
                st.write(f"{k}: {v}")
        for c in risk["Koment√°≈ôe"]:
            st.write(f"üí¨ {c}")

        # üí∞ Intrinsic Value
        st.subheader("üí∞ Intrinsic Value (DCF, DDM)")
        intrinsic = evaluate_intrinsic_value(info, financials, history, cashflow_statement)
        for c in intrinsic["Koment√°≈ôe"]:
            st.write(f"üí¨ {c}")
        st.write(f"‚û°Ô∏è Status: **{intrinsic['Status']}**")

        # ‚úÖ Finanƒçn√≠ v√Ωkazy (posledn√≠ rok)
        st.subheader("üìä Finanƒçn√≠ v√Ωkazy (posledn√≠ rok)")
        latest_balance = balance_sheet.iloc[:, 0] if not balance_sheet.empty else pd.Series()
        latest_financials = financials.iloc[:, 0] if not financials.empty else pd.Series()
        latest_cashflow = cashflow_statement.iloc[:, 0] if not cashflow_statement.empty else pd.Series()

        if not latest_balance.empty:
            st.markdown("**üè¶ Rozvaha**")
            st.write(latest_balance.map(lambda x: f"{x:,.0f}"))
        else:
            st.warning("‚ùå Rozvaha nebyla nalezena.")

        if not latest_financials.empty:
            st.markdown("**üìà V√Ωkaz zisku a ztr√°t**")
            st.write(latest_financials.map(lambda x: f"{x:,.0f}"))
        else:
            st.warning("‚ùå V√Ωkaz zisku a ztr√°t nebyl nalezen.")

        if not latest_cashflow.empty:
            st.markdown("**üíµ Cashflow**")
            st.write(latest_cashflow.map(lambda x: f"{x:,.0f}"))
        else:
            st.warning("‚ùå Cashflow nebyl nalezen.")

                # ‚úÖ Pomƒõrov√© ukazatele
        st.subheader("üìä Pomƒõrov√© ukazatele")
        try:
            # üìà V√Ωpoƒçet z√°kladn√≠ch ukazatel≈Ø
            roa = latest_financials["Net Income"] / latest_balance["Total Assets"] if latest_balance.get("Total Assets", 0) != 0 else None
            roe = latest_financials["Net Income"] / (latest_balance.get("Total Assets", 0) - latest_balance.get("Total Liabilities", 0)) if (latest_balance.get("Total Assets", 0) - latest_balance.get("Total Liabilities", 0)) != 0 else None
            current_ratio = latest_balance["Current Assets"] / latest_balance["Current Liabilities"] if latest_balance.get("Current Liabilities", 0) != 0 else None
            quick_ratio = (latest_balance["Current Assets"] - latest_balance["Inventory"]) / latest_balance["Current Liabilities"] if latest_balance.get("Current Liabilities", 0) != 0 else None
            debt_to_equity = latest_balance.get("Total Liabilities", 0) / latest_balance.get("Ordinary Shares Number", 1)
            gross_margin = latest_financials["Gross Profit"] / latest_financials["Total Revenue"] if latest_financials.get("Total Revenue", 0) != 0 else None

            ratios = {
                "ROA": roa,
                "ROE": roe,
                "Current Ratio": current_ratio,
                "Quick Ratio": quick_ratio,
                "Debt to Equity": debt_to_equity,
                "Gross Margin": gross_margin
            }

            # üìå Benchmark hodnoty ‚Äì podle akademick√Ωch a praktick√Ωch standard≈Ø
            benchmarks = {
                "ROA": 0.05,              # > 5 % dobr√©
                "ROE": 0.10,              # > 10 % dobr√©
                "Current Ratio": (1.5, 3),# optim√°ln√≠ 1.5‚Äì3
                "Quick Ratio": 1.0,       # > 1 dobr√©
                "Debt to Equity": 1.0,    # < 1 dobr√©
                "Gross Margin": 0.40      # > 40 % siln√° firma
            }

            comparison_table = []
            score_from_ratios = 0

            for ratio_name, value in ratios.items():
                if value is None:
                    comparison_table.append({
                        "Ukazatel": ratio_name,
                        "Hodnota": "N/A",
                        "Benchmark": "N/A",
                        "Hodnocen√≠": "‚ö†Ô∏è"
                    })
                    continue

                emoji = "‚öñÔ∏è"
                benchmark_display = benchmarks[ratio_name]

                if ratio_name == "Current Ratio":
                    # zvl√°≈°tn√≠ p≈ô√≠pad: chceme, aby bylo mezi 1.5 a 3
                    if 1.5 <= value <= 3:
                        emoji = "‚úÖ"
                        score_from_ratios += 2
                    elif value < 1.0:
                        emoji = "‚ùå"  # velmi n√≠zk√° likvidita
                    else:
                        emoji = "‚öñÔ∏è"  # p≈ô√≠li≈° vysok√©, ale ne katastrofa
                elif ratio_name == "Debt to Equity":
                    if value < benchmarks["Debt to Equity"]:
                        emoji = "‚úÖ"
                        score_from_ratios += 2
                    elif value > 2:
                        emoji = "‚ùå"
                    else:
                        emoji = "‚öñÔ∏è"
                else:
                    # pro v≈°echny ostatn√≠ (ROA, ROE, Quick, Gross Margin)
                    if value > benchmarks[ratio_name]:
                        emoji = "‚úÖ"
                        score_from_ratios += 2
                    elif ratio_name in ["ROA", "ROE"] and value < 0:
                        emoji = "‚ùå"
                    else:
                        emoji = "‚öñÔ∏è"

                # ‚úÖ P≈ôid√°me do tabulky
                comparison_table.append({
                    "Ukazatel": ratio_name,
                    "Hodnota": round(value, 2),
                    "Benchmark": benchmark_display if not isinstance(benchmark_display, tuple) else f"{benchmark_display[0]}‚Äì{benchmark_display[1]}",
                    "Hodnocen√≠": emoji
                })

            # üìä Zobrazen√≠ tabulky s porovn√°n√≠m
            st.markdown("### üìä Porovn√°n√≠ s benchmarky")
            st.dataframe(pd.DataFrame(comparison_table))

        except Exception as e:
            st.error(f"‚ùå Chyba p≈ôi v√Ωpoƒçtu pomƒõrov√Ωch ukazatel≈Ø: {e}")

        # üîÆ Forecast
        if forecast_days > 0:
            st.subheader(f"üîÆ Forecast na {forecast_days} dn√≠")
            arima_forecast = forecast_arima(history, periods=forecast_days)
            prophet_forecast = forecast_prophet(history, periods=forecast_days)
            holt_forecast = forecast_holt_winters(history, periods=forecast_days)

            # graf forecast≈Ø
            fig1, ax1 = plt.subplots(figsize=(10, 5))
            plot_forecast(history, arima_forecast, prophet_forecast, holt_forecast, days=forecast_days, ax=ax1)
            st.pyplot(fig1)

            # Monte Carlo simulace
            mc_simulation = monte_carlo_simulation(history, simulations=200, days=forecast_days)
            fig2, ax2 = plt.subplots(figsize=(10, 5))
            plot_monte_carlo(history, mc_simulation, days=forecast_days, ax=ax2)
            st.pyplot(fig2)

            comment = evaluate_forecast(arima_forecast)
            st.info(f"üì¢ {comment}")

        # üèÜ Celkov√© hodnocen√≠ akcie
        st.subheader("üèÜ Celkov√© hodnocen√≠ akcie")
        total_score = 0
        if "bullish" in ta['overall'].lower():
            total_score += 18
        elif "neutral" in ta['overall'].lower():
            total_score += 12
        else:
            total_score += 6

        if "POZITIVNƒö" in academic['Hodnocen√≠']:
            total_score += 18
        elif "NEUTR√ÅLNƒö" in academic['Hodnocen√≠']:
            total_score += 12
        else:
            total_score += 6

        if "‚úÖ" in econ['Hodnocen√≠']:
            total_score += 15
        else:
            total_score += 10

        total_score += (risk['Sk√≥re rizika'] * 0.4)

        if "PODHODNOCEN√Å" in intrinsic['Status']:
            total_score += 8
        elif "NADHODNOCEN√Å" in intrinsic['Status']:
            total_score -= 8

        final_score = max(0, round(total_score, 1))
        grade = grade_from_score(final_score)

        st.success(f"‚úÖ Sk√≥re akcie: **{final_score}/100** ‚Äì Zn√°mka: **{grade}**")


# Portfolio builder
# üìÑ streamlit_app.py (p≈ôidat pod stock_analysis_page)

import numpy as np
import yfinance as yf

def portfolio_builder_page():
    st.header("üíº Portfolio Builder")

    # ‚úÖ Naƒçteme seznam spoleƒçnost√≠ z S&P 500
    sp500_df = load_sp500()
    tickers = st.multiselect("üìä Vyber akcie do portfolia:", sp500_df["Symbol"].tolist(), default=["AAPL", "MSFT"])

    strategy = st.selectbox("üìà Vyber strategii:", ["üìä U≈æivatelsk√© v√°hy", "‚öñÔ∏è Equal Weight"])

    weights = {}
    if strategy == "üìä U≈æivatelsk√© v√°hy":
        st.write("‚úèÔ∏è Zadej v√°hy jednotliv√Ωch akci√≠ (souƒçet = 1.0)")
        for ticker in tickers:
            weights[ticker] = st.number_input(f"V√°ha pro {ticker}", min_value=0.0, max_value=1.0, value=round(1/len(tickers),2), step=0.05)
    else:
        # equal weight automaticky
        for ticker in tickers:
            weights[ticker] = 1/len(tickers) if len(tickers) > 0 else 0

    if st.button("üìà Spoƒç√≠tat portfolio"):
        if not tickers:
            st.warning("‚ö†Ô∏è Vyber aspo≈à jednu akcii.")
            return

        # ‚úÖ st√°hneme data z Yahoo Finance
        data = yf.download(selected_stocks, period="3y", group_by="ticker", auto_adjust=True)

        if isinstance(raw_data.columns, pd.MultiIndex):
            data = pd.concat([raw_data[ticker]["Close"].rename(ticker) for ticker in selected_stocks], axis=1)
        else:
            data = raw_data[["Close"]].rename(columns={"Close": selected_stocks[0]})

        # ‚úÖ spoƒç√≠t√°me v√Ωnosy
        returns = data.pct_change().dropna()
        portfolio_return = (returns * list(weights.values())).sum(axis=1)

        # ‚úÖ z√°kladn√≠ metriky
        avg_return = portfolio_return.mean() * 252
        volatility = portfolio_return.std() * np.sqrt(252)
        sharpe = avg_return / volatility if volatility != 0 else 0
        cumulative = (1 + portfolio_return).cumprod()

        # ‚úÖ v√Ωpis metrik
        st.subheader("üìä Portfolio metriky")
        st.write(f"üìà Oƒçek√°van√Ω roƒçn√≠ v√Ωnos: **{avg_return:.2%}**")
        st.write(f"‚ö†Ô∏è Volatilita: **{volatility:.2%}**")
        st.write(f"üìä Sharpe ratio: **{sharpe:.2f}**")

        # ‚úÖ graf v√Ωvoje portfolia
        st.subheader("üìâ V√Ωvoj portfolia")
        fig, ax = plt.subplots(figsize=(10,5))
        cumulative.plot(ax=ax, color="blue", label="Portfolio")
        ax.set_title("V√Ωvoj hodnoty portfolia")
        ax.set_ylabel("Hodnota (start=1)")
        ax.legend()
        st.pyplot(fig)

        # ‚úÖ pie chart slo≈æen√≠ portfolia
        st.subheader("ü•ß Slo≈æen√≠ portfolia")
        fig2, ax2 = plt.subplots()
        ax2.pie(list(weights.values()), labels=list(weights.keys()), autopct="%1.1f%%")
        ax2.set_title(f"Portfolio slo≈æen√≠ ‚Äì strategie {strategy}")
        st.pyplot(fig2)

def calculate_max_drawdown(cumulative_returns):
    """Spoƒç√≠t√° nejvƒõt≈°√≠ propad portfolia."""
    peak = cumulative_returns.cummax()
    drawdown = (cumulative_returns - peak) / peak
    max_dd = drawdown.min()
    return max_dd

def calculate_sortino_ratio(portfolio_return, risk_free=0):
    """Sortino ratio ‚Äì penalizuje jen z√°porn√© v√Ωnosy."""
    downside = portfolio_return[portfolio_return < 0].std()
    avg_return = portfolio_return.mean() * 252
    return (avg_return - risk_free) / (downside * np.sqrt(252)) if downside != 0 else 0

def calculate_beta(portfolio_return, benchmark_return):
    """Beta v≈Øƒçi benchmarku (S&P 500)."""
    covariance = np.cov(portfolio_return, benchmark_return)[0][1]
    market_var = np.var(benchmark_return)
    return covariance / market_var if market_var != 0 else 0

def portfolio_builder_page():
    st.header("üíº Portfolio Builder")

    # ‚úÖ Naƒçteme seznam spoleƒçnost√≠ z S&P 500
    sp500_df = load_sp500()
    tickers = st.multiselect("üìä Vyber akcie do portfolia:", sp500_df["Symbol"].tolist(), default=["AAPL", "MSFT"])

    strategy = st.selectbox("üìà Vyber strategii:", ["üìä U≈æivatelsk√© v√°hy", "‚öñÔ∏è Equal Weight"])

    weights = {}
    if strategy == "üìä U≈æivatelsk√© v√°hy":
        st.write("‚úèÔ∏è Zadej v√°hy jednotliv√Ωch akci√≠ (souƒçet = 1.0)")
        for ticker in tickers:
            weights[ticker] = st.number_input(f"V√°ha pro {ticker}", min_value=0.0, max_value=1.0, value=round(1/len(tickers),2), step=0.05)
    else:
        # equal weight automaticky
        for ticker in tickers:
            weights[ticker] = 1/len(tickers) if len(tickers) > 0 else 0

    if st.button("üìà Spoƒç√≠tat portfolio"):
        if not tickers:
            st.warning("‚ö†Ô∏è Vyber aspo≈à jednu akcii.")
            return

        # ‚úÖ st√°hneme data z Yahoo Finance (portfolio + S&P 500)
        data = yf.download(tickers + ["^GSPC"], period="1y")["Adj Close"]
        sp500 = data["^GSPC"]
        data = data.drop(columns="^GSPC")

        # ‚úÖ v√Ωpoƒçty v√Ωnos≈Ø
        returns = data.pct_change().dropna()
        sp500_returns = sp500.pct_change().dropna()

        # ‚úÖ portfolio v√Ωnos
        portfolio_return = (returns * list(weights.values())).sum(axis=1)
        cumulative = (1 + portfolio_return).cumprod()

        # ‚úÖ metriky
        avg_return = portfolio_return.mean() * 252
        volatility = portfolio_return.std() * np.sqrt(252)
        sharpe = avg_return / volatility if volatility != 0 else 0

        sortino = calculate_sortino_ratio(portfolio_return)
        max_dd = calculate_max_drawdown(cumulative)
        cagr = (cumulative[-1]) ** (252/len(portfolio_return)) - 1
        calmar = cagr / abs(max_dd) if max_dd != 0 else 0
        beta = calculate_beta(portfolio_return, sp500_returns)

        # ‚úÖ V√Ωpis metrik
        st.subheader("üìä Portfolio metriky")
        st.write(f"üìà **Oƒçek√°van√Ω roƒçn√≠ v√Ωnos:** {avg_return:.2%}")
        st.write(f"‚ö†Ô∏è **Volatilita:** {volatility:.2%}")
        st.write(f"üìä **Sharpe ratio:** {sharpe:.3f}")
        st.write(f"üìâ **Sortino ratio:** {sortino:.3f}")
        st.write(f"üìâ **Max Drawdown:** {max_dd:.1%}")
        st.write(f"üìà **CAGR:** {cagr:.2%}")
        st.write(f"üìà **Beta v≈Øƒçi S&P 500:** {beta:.2f}")
        st.write(f"üìä **Calmar ratio:** {calmar:.3f}")

        # ‚úÖ graf v√Ωvoje portfolia vs. S&P 500
        st.subheader("üìâ Portfolio vs. S&P 500")
        cumulative_sp500 = (1 + sp500_returns).cumprod()

        fig, ax = plt.subplots(figsize=(10,5))
        cumulative.plot(ax=ax, color="blue", label="Portfolio")
        cumulative_sp500.plot(ax=ax, color="orange", label="S&P 500")
        ax.set_title("üìâ Portfolio vs. S&P 500")
        ax.set_ylabel("Hodnota (start=1)")
        ax.legend()
        st.pyplot(fig)

        # ‚úÖ pie chart slo≈æen√≠ portfolia
        st.subheader("ü•ß Slo≈æen√≠ portfolia")
        fig2, ax2 = plt.subplots()
        ax2.pie(list(weights.values()), labels=list(weights.keys()), autopct="%1.1f%%")
        ax2.set_title(f"Portfolio slo≈æen√≠ ‚Äì strategie {strategy}")
        st.pyplot(fig2)
from scipy.optimize import minimize

def optimize_portfolio(returns, strategy="max_sharpe"):
    """Optimalizuje portfolio podle strategie: max_sharpe nebo min_vol."""
    n_assets = returns.shape[1]

    def portfolio_metrics(weights):
        port_return = np.sum(returns.mean() * weights) * 252
        port_vol = np.sqrt(np.dot(weights.T, np.dot(returns.cov() * 252, weights)))
        sharpe = port_return / port_vol if port_vol != 0 else 0
        return port_return, port_vol, sharpe

    # üìä Omezen√≠: souƒçet vah = 1
    constraints = {"type": "eq", "fun": lambda w: np.sum(w) - 1}
    bounds = tuple((0, 1) for _ in range(n_assets))

    if strategy == "max_sharpe":
        # üéØ maximalizujeme Sharpe ratio
        def neg_sharpe(w):
            return -portfolio_metrics(w)[2]
        result = minimize(neg_sharpe, n_assets * [1./n_assets], bounds=bounds, constraints=constraints)
    elif strategy == "min_vol":
        # üéØ minimalizujeme volatilitu
        def vol(w):
            return portfolio_metrics(w)[1]
        result = minimize(vol, n_assets * [1./n_assets], bounds=bounds, constraints=constraints)
    else:
        return np.array([1./n_assets]*n_assets)  # fallback na equal weight

    return result.x if result.success else np.array([1./n_assets]*n_assets)

def grade_portfolio(sharpe, max_dd, cagr):
    """Vrac√≠ zn√°mku portfolia (A‚ÄìF)."""
    score = 0
    # Sharpe ratio (max 40 bod≈Ø)
    if sharpe > 1.0:
        score += 40
    elif sharpe > 0.5:
        score += 25
    elif sharpe > 0.2:
        score += 15
    else:
        score += 5

    # Max Drawdown (max 30 bod≈Ø)
    if max_dd > -0.1:
        score += 30
    elif max_dd > -0.2:
        score += 20
    else:
        score += 10

    # CAGR (max 30 bod≈Ø)
    if cagr > 0.10:
        score += 30
    elif cagr > 0.05:
        score += 20
    else:
        score += 10

    if score >= 85:
        return "A"
    elif score >= 70:
        return "B"
    elif score >= 55:
        return "C"
    elif score >= 40:
        return "D"
    elif score >= 25:
        return "E"
    else:
        return "F"

def portfolio_builder_page():
    st.header("üíº Portfolio Builder")

    sp500_df = load_sp500()
    tickers = st.multiselect("üìä Vyber akcie do portfolia:", sp500_df["Symbol"].tolist(), default=["AAPL", "MSFT"])

    strategy = st.selectbox("üìà Vyber strategii:", ["üìä U≈æivatelsk√© v√°hy", "‚öñÔ∏è Equal Weight", "üöÄ Max Sharpe", "üõ°Ô∏è Min Volatility"])

    weights = {}
    if strategy == "üìä U≈æivatelsk√© v√°hy":
        st.write("‚úèÔ∏è Zadej v√°hy jednotliv√Ωch akci√≠ (souƒçet = 1.0)")
        for ticker in tickers:
            weights[ticker] = st.number_input(f"V√°ha pro {ticker}", min_value=0.0, max_value=1.0, value=round(1/len(tickers),2), step=0.05)
    else:
        for ticker in tickers:
            weights[ticker] = 1/len(tickers) if len(tickers) > 0 else 0

    if st.button("üìà Spoƒç√≠tat portfolio"):
        if not tickers:
            st.warning("‚ö†Ô∏è Vyber aspo≈à jednu akcii.")
            return

        data = yf.download(tickers + ["^GSPC"], period="1y")["Adj Close"]
        sp500 = data["^GSPC"]
        data = data.drop(columns="^GSPC")

        returns = data.pct_change().dropna()
        sp500_returns = sp500.pct_change().dropna()

        # ‚úÖ optimalizace vah pro strategii (pokud nen√≠ user input)
        if strategy in ["üöÄ Max Sharpe", "üõ°Ô∏è Min Volatility"]:
            opt_strategy = "max_sharpe" if strategy == "üöÄ Max Sharpe" else "min_vol"
            optimized_weights = optimize_portfolio(returns, strategy=opt_strategy)
            opt_weights_dict = dict(zip(tickers, optimized_weights))
        else:
            optimized_weights = list(weights.values())
            opt_weights_dict = weights

        # ‚úÖ portfolio return
        portfolio_return = (returns * list(opt_weights_dict.values())).sum(axis=1)
        cumulative = (1 + portfolio_return).cumprod()

        avg_return = portfolio_return.mean() * 252
        volatility = portfolio_return.std() * np.sqrt(252)
        sharpe = avg_return / volatility if volatility != 0 else 0
        sortino = calculate_sortino_ratio(portfolio_return)
        max_dd = calculate_max_drawdown(cumulative)
        cagr = (cumulative[-1]) ** (252/len(portfolio_return)) - 1
        calmar = cagr / abs(max_dd) if max_dd != 0 else 0
        beta = calculate_beta(portfolio_return, sp500_returns)

        # ‚úÖ zn√°mka portfolia
        grade = grade_portfolio(sharpe, max_dd, cagr)

        # üìä V√Ωpis v√Ωsledk≈Ø
        st.subheader("üìä Hodnocen√≠ portfolia")
        st.write(f"üìà **Roƒçn√≠ v√Ωnos:** {avg_return:.2%}")
        st.write(f"‚ö†Ô∏è **Volatilita:** {volatility:.2%}")
        st.write(f"üìä **Sharpe ratio:** {sharpe:.3f}")
        st.write(f"üìâ **Max Drawdown:** {max_dd:.1%}")
        st.write(f"üìà **CAGR:** {cagr:.2%}")
        st.success(f"üéØ **Zn√°mka portfolia: {grade}**")

        # üìà graf portfolia vs. S&P 500
        cumulative_sp500 = (1 + sp500_returns).cumprod()
        fig, ax = plt.subplots(figsize=(10,5))
        cumulative.plot(ax=ax, color="blue", label="Portfolio")
        cumulative_sp500.plot(ax=ax, color="orange", label="S&P 500")
        ax.set_title("üìâ Portfolio vs. S&P 500")
        ax.set_ylabel("Hodnota (start=1)")
        ax.legend()
        st.pyplot(fig)

        # ü•ß Pie chart slo≈æen√≠
        st.subheader("ü•ß Slo≈æen√≠ portfolia")
        fig2, ax2 = plt.subplots()
        ax2.pie(list(opt_weights_dict.values()), labels=list(opt_weights_dict.keys()), autopct="%1.1f%%")
        ax2.set_title(f"Portfolio slo≈æen√≠ ‚Äì strategie {strategy}")
        st.pyplot(fig2)

        # üìä Tabulka doporuƒçen√Ωch vah vs. souƒçasn√Ωch
        if strategy == "üìä U≈æivatelsk√© v√°hy":
            st.subheader("üéØ Doporuƒçen√© strategie (optimalizace)")
            max_sharpe_weights = optimize_portfolio(returns, strategy="max_sharpe")
            min_vol_weights = optimize_portfolio(returns, strategy="min_vol")
            st.write("üöÄ **Doporuƒçen√© v√°hy ‚Äì Max Sharpe:**")
            st.dataframe(pd.DataFrame({"Ticker": tickers, "Doporuƒçen√° v√°ha": max_sharpe_weights}))
            st.write("üõ°Ô∏è **Doporuƒçen√© v√°hy ‚Äì Min Volatility:**")
            st.dataframe(pd.DataFrame({"Ticker": tickers, "Doporuƒçen√° v√°ha": min_vol_weights}))
                    # üèÜ Slovn√≠ koment√°≈ô k portfoliu
        st.subheader("üèÜ Hlub≈°√≠ hodnocen√≠ portfolia:")

        # üîπ Koment√°≈ô k Sharpe ratio
        if sharpe > 1.0:
            st.write("‚úÖ **Portfolio m√° velmi dobr√© Sharpe ratio ‚Äì v√Ωnosy v√≠ce ne≈æ kompenzuj√≠ riziko.**")
        elif sharpe > 0.5:
            st.write("‚öñÔ∏è **Portfolio m√° solidn√≠ Sharpe ratio ‚Äì riziko a v√Ωnos jsou v rovnov√°ze.**")
        else:
            st.write("‚ùå **Portfolio m√° n√≠zk√© Sharpe ratio ‚Äì risk neodpov√≠d√° v√Ωnos≈Øm.**")

        # üîπ Koment√°≈ô k volatilitƒõ
        if volatility < 0.15:
            st.write("‚úÖ **Portfolio m√° n√≠zkou volatilitu ‚Äì stabiln√≠ v√Ωkonnost.**")
        elif volatility < 0.25:
            st.write("‚öñÔ∏è **Portfolio m√° st≈ôedn√≠ volatilitu ‚Äì p≈ôijateln√° √∫rove≈à rizika.**")
        else:
            st.write("‚ùå **Portfolio je vysoce volatiln√≠ ‚Äì investice je rizikov√°.**")

        # üîπ Koment√°≈ô k Max Drawdown
        if max_dd > -0.1:
            st.write("‚úÖ **Portfolio m√° n√≠zk√Ω maxim√°ln√≠ propad (Max Drawdown) ‚Äì dobr√° ochrana kapit√°lu.**")
        elif max_dd > -0.2:
            st.write("‚öñÔ∏è **Portfolio m√° st≈ôedn√≠ propad ‚Äì obƒçasn√© poklesy, ale zvl√°dnuteln√©.**")
        else:
            st.write("‚ùå **Portfolio m√° velk√Ω propad ‚Äì vysok√© riziko ztr√°t v hor≈°√≠ch ƒçasech.**")

        # üîπ Koment√°≈ô k CAGR
        if cagr > 0.10:
            st.write("‚úÖ **Portfolio m√° vysok√Ω CAGR ‚Äì velmi dobr√Ω dlouhodob√Ω r≈Øst.**")
        elif cagr > 0.05:
            st.write("‚öñÔ∏è **Portfolio m√° pr≈Ømƒõrn√Ω CAGR ‚Äì slu≈°n√Ω dlouhodob√Ω v√Ωnos.**")
        else:
            st.write("‚ùå **Portfolio m√° n√≠zk√Ω CAGR ‚Äì v√Ωnos je pod oƒçek√°v√°n√≠m.**")

# üìÑ valuetracker/screener_ui.py
import streamlit as st

OPERATORS = ["<", "<=", ">", ">=", "==", "!="]

def screener_ui():
    st.header("üìä Stock Screener")

    st.markdown("üéØ **Vyber si ukazatele a filtruj akcie podle sv√Ωch pravidel!**")

    metrics = [
        "ROA", "ROE", "Debt to Equity", "Current Ratio",
        "Quick Ratio", "Gross Margin"
    ]

    # =======================
    # üìå SCREENING AKCI√ç BLOK
    # =======================
    st.subheader("üìä Screening akci√≠")
    criteria = {}

    for i in range(3):
        cols = st.columns([2,1,1])
        with cols[0]:
            metric = st.selectbox(f"Ukazatel {i+1}", ["(≈æ√°dn√Ω)"] + metrics, key=f"metric_{i}")
        with cols[1]:
            operator = st.selectbox("Oper√°tor", OPERATORS, key=f"op_{i}")
        with cols[2]:
            value = st.number_input("Hodnota", value=0.0, key=f"value_{i}")

        if metric != "(≈æ√°dn√Ω)":
            criteria[metric] = (operator, value)

    run_screening = st.button("üîç Spustit screening")

    # =======================
    # üèÜ RANKING AKCI√ç BLOK
    # =======================
    st.subheader("üèÜ Ranking akci√≠")
    rank_metric = st.selectbox("Rank podle:", metrics, key="rank_metric")

    cols_rank = st.columns([1,2])
    with cols_rank[0]:
        ascending = st.radio("≈òazen√≠:", ["Sestupnƒõ", "Vzestupnƒõ"], index=0) == "Vzestupnƒõ"
    with cols_rank[1]:
        top_n = st.slider("Top N:", min_value=1, max_value=50, value=10)

    run_ranking = st.button("üèÜ Spustit ranking")

    return criteria, run_screening, rank_metric, ascending, top_n, run_ranking

# üìÑ streamlit_app.py

import streamlit as st

# Import hlavn√≠ch UI funkc√≠ a modul≈Ø
from valuetracker.sp500_loader import load_sp500
from valuetracker.movements import get_top_movements_from_csv

# ========== SIDEBAR MENU ==========
st.sidebar.title("üìä Valuetracker ‚Äì Finance Hub")

menu = st.sidebar.radio(
    "Vyber modul:",
    ["üìà Stock Analysis", "üíº Portfolio Builder", "üîç Screener", "üìä Top Movements"]
)

# ========== OBSAH STR√ÅNKY ==========
st.title("üìä Valuetracker")

if menu == "üìà Stock Analysis":
    st.subheader("üìà Anal√Ωza vybran√© akcie")
    st.info("Vyber akcii ze seznamu a zobraz√≠ se komplexn√≠ anal√Ωza (TA, fundament√°ln√≠ ukazatele, forecasty, atd.).")
    stock_analysis_page()

elif menu == "üíº Portfolio Builder":
    st.subheader("üíº Tvorba portfolia")
    st.info("Vyber akcie a v√°hy, nebo pou≈æij strategii (Max Sharpe, Min riziko).")

    # üîÑ Naƒçteme seznam akci√≠ z S&P 500
    sp500_df = load_sp500()
    tickers = sp500_df["Symbol"].tolist()

    # üì• V√Ωbƒõr akci√≠
    selected_stocks = st.multiselect("Vyber akcie do portfolia:", tickers, default=["AAPL", "MSFT", "GOOGL"])

    # üèóÔ∏è V√Ωbƒõr strategie
    strategy = st.radio("Zvol strategii:", ["Vlastn√≠ v√°hy", "Max Sharpe", "Min Riziko"])

    weights = {}
    if strategy == "Vlastn√≠ v√°hy":
        st.markdown("### ‚úèÔ∏è Nastav v√°hy jednotliv√Ωm akci√≠m")
        total_weight = 0
        for stock in selected_stocks:
            w = st.slider(f"V√°ha pro {stock} (%)", 0, 100, 10)
            weights[stock] = w / 100
            total_weight += w

        if total_weight != 100:
            st.warning("‚ö†Ô∏è V√°hy ned√°vaj√≠ dohromady 100 % ‚Äì portfolio se p≈ôepoƒç√≠t√° automaticky.")
            # p≈ôepoƒç√≠t√°me v√°hy proporcion√°lnƒõ
            total_sum = sum(weights.values())
            weights = {k: v / total_sum for k, v in weights.items()}

    elif strategy == "Max Sharpe":
        st.markdown("üìà **Strategie Max Sharpe zat√≠m nastavuje rovnomƒõrn√© v√°hy. (Budouc√≠ verze p≈ôid√° optimalizaci)**")
        weights = {stock: 1 / len(selected_stocks) for stock in selected_stocks}

    elif strategy == "Min Riziko":
        st.markdown("üõ°Ô∏è **Strategie Min Riziko zat√≠m nastavuje rovnomƒõrn√© v√°hy. (Budouc√≠ verze p≈ôid√° optimalizaci)**")
        weights = {stock: 1 / len(selected_stocks) for stock in selected_stocks}

    # ‚úÖ Tlaƒç√≠tko pro v√Ωpoƒçet portfolia
# ‚úÖ Tlaƒç√≠tko pro v√Ωpoƒçet portfolia
if st.button("üìä Spoƒç√≠tat portfolio"):
    if not selected_stocks:
        st.error("‚ùå Vyber alespo≈à jednu akcii.")
    else:
        st.success("‚úÖ Poƒç√≠t√°m portfolio‚Ä¶")

        import yfinance as yf

        # üì• St√°hneme data z Yahoo Finance pro portfolio + S&P 500
        raw_data = yf.download(selected_stocks + ["^GSPC"], period="3y", group_by="ticker", auto_adjust=True)

        # ‚úÖ S&P 500 zvl√°≈°≈• ulo≈æ√≠me
        if isinstance(raw_data.columns, pd.MultiIndex):
            sp500 = raw_data["^GSPC"]["Close"]
            data = pd.concat(
                [raw_data[ticker]["Close"].rename(ticker) for ticker in selected_stocks],
                axis=1
            )
        else:
            sp500 = raw_data["Close"]
            data = raw_data[["Close"]].rename(columns={"Close": selected_stocks[0]})

        # ‚úÖ Vyƒçist√≠me NaN hodnoty
        data = data.dropna()
        sp500 = sp500.dropna()

        # üî¢ V√Ωpoƒçet denn√≠ch v√Ωnos≈Ø
        returns = data.pct_change().dropna()
        sp500_returns = sp500.pct_change().dropna()

        # üìä V√Ωpoƒçet metrik portfolia
        weights_array = np.array([weights[t] for t in selected_stocks])
        portfolio_returns = (returns * weights_array).sum(axis=1)

        # üìà Kumulativn√≠ v√Ωvoj (portfolio i index)
        cumulative_portfolio = (1 + portfolio_returns).cumprod()
        cumulative_sp500 = (1 + sp500_returns).cumprod()

        # üìä Finanƒçn√≠ metriky portfolia
        cagr = (1 + portfolio_returns.mean()) ** 252 - 1
        sharpe = (portfolio_returns.mean() / portfolio_returns.std()) * np.sqrt(252)
        volatility = portfolio_returns.std() * np.sqrt(252)
        running_max = cumulative_portfolio.cummax()
        max_dd = (cumulative_portfolio / running_max - 1).min()

        # üìä Finanƒçn√≠ metriky S&P 500 pro srovn√°n√≠
        sp500_cagr = (1 + sp500_returns.mean()) ** 252 - 1

        # üìà Graf v√Ωvoje portfolia vs. S&P 500
        st.markdown("### üìà V√Ωvoj portfolia vs. S&P 500")
        fig, ax = plt.subplots(figsize=(10, 5))
        cumulative_portfolio.plot(ax=ax, color="blue", label="Portfolio")
        cumulative_sp500.plot(ax=ax, color="orange", label="S&P 500")
        ax.set_title("V√Ωvoj hodnoty portfolia (3 roky)")
        ax.set_xlabel("Datum")
        ax.set_ylabel("Hodnota (start=1)")
        ax.grid(True)
        ax.legend()
        st.pyplot(fig)

        # üìä Tabulka metrik
        st.markdown("### üìä Hlavn√≠ metriky portfolia")
        st.table({
            "CAGR": [f"{cagr:.2%}"],
            "Sharpe ratio": [f"{sharpe:.2f}"],
            "Volatilita": [f"{volatility:.2%}"],
            "Max Drawdown": [f"{max_dd:.2%}"],
            "S&P 500 CAGR": [f"{sp500_cagr:.2%}"]
        })

        # üèÜ Slovn√≠ hodnocen√≠
        st.markdown("### üèÜ Hodnocen√≠ portfolia")

        # üîπ Sharpe ratio koment√°≈ô
        if sharpe > 1.0:
            st.write("‚úÖ **V√Ωborn√© Sharpe ratio ‚Äì portfolio m√° skvƒõl√Ω pomƒõr v√Ωnos/riziko.**")
        elif sharpe > 0.5:
            st.write("‚öñÔ∏è **Solidn√≠ Sharpe ratio ‚Äì portfolio m√° p≈ôijateln√Ω pomƒõr v√Ωnos/riziko.**")
        else:
            st.write("‚ùå **N√≠zk√© Sharpe ratio ‚Äì riziko nen√≠ dostateƒçnƒõ kompenzov√°no v√Ωnosy.**")

        # üîπ Volatilita koment√°≈ô
        if volatility < 0.15:
            st.write("‚úÖ **N√≠zk√° volatilita ‚Äì portfolio je stabiln√≠.**")
        elif volatility < 0.25:
            st.write("‚öñÔ∏è **St≈ôedn√≠ volatilita ‚Äì portfolio m√° obƒçasn√© v√Ωkyvy, ale nen√≠ extr√©mnƒõ rizikov√©.**")
        else:
            st.write("‚ùå **Vysok√° volatilita ‚Äì portfolio je rizikov√©.**")

        # üîπ Max Drawdown koment√°≈ô
        if max_dd > -0.1:
            st.write("‚úÖ **N√≠zk√Ω maxim√°ln√≠ propad ‚Äì portfolio dob≈ôe chr√°n√≠ kapit√°l.**")
        elif max_dd > -0.2:
            st.write("‚öñÔ∏è **St≈ôedn√≠ maxim√°ln√≠ propad ‚Äì obƒçasn√© ztr√°ty, ale snesiteln√©.**")
        else:
            st.write("‚ùå **Velk√Ω maxim√°ln√≠ propad ‚Äì portfolio m≈Ø≈æe zaznamenat vysok√© ztr√°ty.**")

        # üîπ CAGR koment√°≈ô
        if cagr > 0.10:
            st.write("‚úÖ **Vysok√Ω CAGR ‚Äì portfolio roste velmi dob≈ôe dlouhodobƒõ.**")
        elif cagr > 0.05:
            st.write("‚öñÔ∏è **Pr≈Ømƒõrn√Ω CAGR ‚Äì portfolio m√° slu≈°n√Ω r≈Øst.**")
        else:
            st.write("‚ùå **N√≠zk√Ω CAGR ‚Äì portfolio roste pomalu.**")

        # üìä Porovn√°n√≠ s S&P 500
        st.markdown("### üìä Jak si portfolio vede proti S&P 500?")
        if cagr > sp500_cagr:
            st.success(f"üöÄ **Portfolio p≈ôekon√°v√° S&P 500 o {cagr - sp500_cagr:.2%} roƒçnƒõ!**")
        elif cagr == sp500_cagr:
            st.info("‚öñÔ∏è **Portfolio m√° stejn√Ω v√Ωkon jako S&P 500.**")
        else:
            st.error(f"üìâ **Portfolio zaost√°v√° za S&P 500 o {sp500_cagr - cagr:.2%} roƒçnƒõ.**")


elif menu == "üîç Screener":
    st.subheader("üîç Screener akci√≠")
    st.info("Filtruj akcie podle krit√©ri√≠ a vytvo≈ô vlastn√≠ seznam.")

    # ‚úÖ Naƒçteme seznam S&P 500
    sp500_df = load_sp500()
    tickers = sp500_df["Symbol"].tolist()

    # üìä Metriky pro screening
    metrics = ["ROA", "ROE", "Debt to Equity", "Current Ratio", "Quick Ratio", "Gross Margin"]

    # üìå oper√°tory
    OPERATORS = {
        "<": lambda a, b: a < b,
        "<=": lambda a, b: a <= b,
        ">": lambda a, b: a > b,
        ">=": lambda a, b: a >= b,
        "==": lambda a, b: a == b,
        "!=": lambda a, b: a != b
    }

    # =====================================
    # üéØ Screening akci√≠ ‚Äì UI
    # =====================================
    st.markdown("### üéØ Screening akci√≠")
    st.write("Vyber a≈æ 3 krit√©ria a filtruj akcie:")

    criteria = {}
    for i in range(3):
        cols = st.columns([2, 1, 1])
        with cols[0]:
            metric = st.selectbox(f"Ukazatel {i+1}", ["(≈æ√°dn√Ω)"] + metrics, key=f"metric_{i}")
        with cols[1]:
            operator = st.selectbox("Oper√°tor", list(OPERATORS.keys()), key=f"op_{i}")
        with cols[2]:
            value = st.number_input("Hodnota", value=0.0, key=f"value_{i}")

        if metric != "(≈æ√°dn√Ω)":
            criteria[metric] = (operator, value)

    run_screening = st.button("üîç Spustit screening")

    st.markdown("---")
    # =====================================
    # üèÜ Ranking akci√≠ ‚Äì UI
    # =====================================
    st.markdown("### üèÜ Ranking akci√≠")
    rank_metric = st.selectbox("Rank podle:", metrics, key="rank_metric")

    cols_rank = st.columns([1, 2])
    with cols_rank[0]:
        ascending = st.radio("≈òazen√≠:", ["Sestupnƒõ", "Vzestupnƒõ"], index=0) == "Vzestupnƒõ"
    with cols_rank[1]:
        top_n = st.slider("Top N:", min_value=1, max_value=50, value=10)

    run_ranking = st.button("üèÜ Spustit ranking")

    # ==================================================
    # üìå Helper funkce ‚Äì v√Ωpoƒçet ratios pro ticker
    # ==================================================
    def calculate_ratios_for_ticker(ticker):
        """Vr√°t√≠ dictionary s ratios pro dan√Ω ticker ‚Äì v≈ædy v≈°echny sloupce."""
        try:
            stock_data = get_stock_data(ticker, period="1y")
            info = stock_data['info']
            financials = stock_data['financials']
            balance = stock_data['balance_sheet']

            # ‚úÖ Pou≈æijeme posledn√≠ sloupce (jako ve Stock Analysis)
            latest_balance = balance.iloc[:, 0] if not balance.empty else pd.Series()
            latest_financials = financials.iloc[:, 0] if not financials.empty else pd.Series()

            # ‚úÖ Pomƒõrov√© ukazatele (ochrana proti dƒõlen√≠ nulou)
            roa = latest_financials.get("Net Income", np.nan) / latest_balance.get("Total Assets", np.nan)
            roe = latest_financials.get("Net Income", np.nan) / (
                latest_balance.get("Total Assets", np.nan) - latest_balance.get("Total Liabilities", 0)
            ) if latest_balance.get("Total Assets", 0) != 0 else np.nan
            current_ratio = latest_balance.get("Current Assets", np.nan) / latest_balance.get("Current Liabilities", np.nan)
            quick_ratio = (latest_balance.get("Current Assets", np.nan) - latest_balance.get("Inventory", 0)) / latest_balance.get("Current Liabilities", np.nan)
            debt_to_equity = latest_balance.get("Total Liabilities", np.nan) / latest_balance.get("Ordinary Shares Number", np.nan)
            gross_margin = latest_financials.get("Gross Profit", np.nan) / latest_financials.get("Total Revenue", np.nan)

            return {
                "Ticker": ticker,
                "Name": info.get("shortName", "N/A"),
                "ROA": roa,
                "ROE": roe,
                "Current Ratio": current_ratio,
                "Quick Ratio": quick_ratio,
                "Debt to Equity": debt_to_equity,
                "Gross Margin": gross_margin
            }
        except Exception as e:
            st.write(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ dat pro {ticker}: {e}")
            return {
                "Ticker": ticker,
                "Name": "N/A",
                "ROA": np.nan,
                "ROE": np.nan,
                "Current Ratio": np.nan,
                "Quick Ratio": np.nan,
                "Debt to Equity": np.nan,
                "Gross Margin": np.nan
            }

    # =================================
    # üîç SCREENING ‚Äì po stisknut√≠ tlaƒç√≠tka
    # =================================
    if run_screening:
        st.subheader("üìä V√Ωsledky screeningu")
        st.info("‚è≥ Naƒç√≠t√°m data a filtruju‚Ä¶")

        data_list = [calculate_ratios_for_ticker(t) for t in tickers[:30]]  # üöÄ zat√≠m jen 30 ticker≈Ø pro rychlost
        df = pd.DataFrame(data_list)

        # üéØ aplikujeme krit√©ria
        for metric, (op, value) in criteria.items():
            if metric not in df.columns:
                st.warning(f"‚ö†Ô∏è Sloupec '{metric}' nen√≠ v datech ‚Äì p≈ôeskoƒçeno.")
                continue

            func = OPERATORS.get(op)
            if func is None:
                st.warning(f"‚ö†Ô∏è Oper√°tor '{op}' neplatn√Ω ‚Äì p≈ôeskoƒçeno.")
                continue

            before_rows = len(df)
            df = df[df[metric].notna() & func(df[metric], value)]
            after_rows = len(df)

            st.write(f"üìä **{metric} {op} {value}** ‚Üí {before_rows} ‚û°Ô∏è {after_rows}")

        # üìä V√Ωstup
        if df.empty:
            st.error("‚ùå ≈Ω√°dn√° akcie nespl≈àuje zadan√° krit√©ria.")
        else:
            st.dataframe(df)

    # =================================
    # üèÜ RANKING ‚Äì po stisknut√≠ tlaƒç√≠tka
    # =================================
    if run_ranking:
        st.subheader(f"üèÜ Ranking akci√≠ podle: {rank_metric}")
        st.info("‚è≥ Naƒç√≠t√°m data a ≈ôad√≠m‚Ä¶")

        data_list = [calculate_ratios_for_ticker(t) for t in tickers[:30]]
        df = pd.DataFrame(data_list)

        if rank_metric in df.columns:
            df_ranked = df.sort_values(by=rank_metric, ascending=ascending).head(top_n)
            st.dataframe(df_ranked)
        else:
            st.warning(f"‚ö†Ô∏è Sloupec '{rank_metric}' nen√≠ dostupn√Ω.")

elif menu == "üìä Top Movements":
    st.subheader("üìä Nejvƒõt≈°√≠ pohyby akci√≠ (za vƒçerej≈°ek)")
    st.info("Zobraz√≠ nejvƒõt≈°√≠ r≈Østy a poklesy cen za posledn√≠ obchodn√≠ den.")

    import yfinance as yf
    from datetime import datetime, timedelta

    # ‚úÖ Naƒçteme tickery z S&P 500
    sp500_df = load_sp500()
    tickers = sp500_df["Symbol"].tolist()

    # ‚úÖ Z√≠sk√°me data za posledn√≠ch 5 dn√≠ (kv≈Øli v√≠kend≈Øm/sv√°tk≈Øm)
    data = yf.download(tickers, period="5d", interval="1d")["Close"]

    # ‚úÖ O≈°et≈ôen√≠, kdyby byl jen 1 ticker (p≈ôevedeme na DataFrame)
    if isinstance(data, pd.Series):
        data = data.to_frame()

    # ‚úÖ Najdeme posledn√≠ a p≈ôedposledn√≠ obchodn√≠ den
    if len(data) < 2:
        st.error("‚ùå Nedostatek dat pro v√Ωpoƒçet pohyb≈Ø.")
    else:
        yesterday = data.iloc[-1]
        day_before = data.iloc[-2]

        # ‚úÖ Spoƒç√≠t√°me denn√≠ procentn√≠ zmƒõnu
        daily_change = ((yesterday - day_before) / day_before) * 100

        # ‚úÖ Vyƒçist√≠me NaN hodnoty
        daily_change = daily_change.dropna()

        # ‚úÖ Najdeme top 5 r≈Øst≈Ø a pokles≈Ø
        top_up = daily_change.sort_values(ascending=False).head(5)
        top_down = daily_change.sort_values(ascending=True).head(5)

        # ‚úÖ V√Ωpis v√Ωsledk≈Ø
        st.markdown("### üìà Nejvƒõt≈°√≠ r≈Østy (vƒçera)")
        st.dataframe(top_up.to_frame(name="Zmƒõna %").style.format({"Zmƒõna %": "{:.2f}%"}))

        st.markdown("### üìâ Nejvƒõt≈°√≠ poklesy (vƒçera)")
        st.dataframe(top_down.to_frame(name="Zmƒõna %").style.format({"Zmƒõna %": "{:.2f}%"}))




